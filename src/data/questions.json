{
  "questions": [
    {
      "question": "Quel est l'objectif principal de Redux Toolkit ?",
      "options": [
        "Simplifier la logique Redux et réduire le code répétitif",
        "Remplacer Redux classique entièrement",
        "Ajouter plus de complexité à la gestion de l'état"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Quelle fonction est utilisée pour créer un slice Redux dans Redux Toolkit ?",
      "options": ["createSlice", "createReducer", "createAction"],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Que fait la fonction `configureStore` dans Redux Toolkit ?",
      "options": [
        "Configure le store Redux avec des paramètres par défaut optimisés",
        "Crée un seul réducteur pour toute l'application",
        "Remplace la nécessité d'utiliser des réducteurs"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Laquelle des affirmations suivantes est vraie concernant `createSlice` ?",
      "options": [
        "Il génère automatiquement des créateurs d'actions",
        "Il nécessite la création manuelle des réducteurs",
        "Il ne peut pas gérer de logique asynchrone"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Comment Redux Toolkit active-t-il Redux DevTools ?",
      "options": [
        "En activant l'option devTools dans createSlice",
        "En important Redux DevTools manuellement",
        "C'est activé par défaut via configureStore"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "Quel utilitaire de Redux Toolkit est utilisé pour gérer la logique asynchrone ?",
      "options": ["createAsyncThunk", "createSlice", "createReducer"],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Que retourne la fonction createAsyncThunk ?",
      "options": [
        "Un reducer pour gérer les actions asynchrones",
        "Un action creator qui gère les états pending, fulfilled et rejected",
        "Un middleware pour les requêtes API"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "Lequel des éléments suivants est un avantage de Redux Toolkit ?",
      "options": [
        "Il réduit le code répétitif",
        "Il élimine le besoin de réducteurs",
        "Il remplace entièrement l'état de React"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Quel est l'objectif de la bibliothèque `immer` dans Redux Toolkit ?",
      "options": [
        "Simplifier les mises à jour immuables",
        "Gérer les actions asynchrones",
        "Remplacer Redux entièrement"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Quelle méthode est utilisée pour créer un magasin Redux avec Redux Toolkit ?",
      "options": ["createSlice", "configureStore", "createStore"],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Comment Redux Toolkit aide-t-il à gérer les erreurs dans les requêtes asynchrones ?",
      "options": [
        "En écrivant des reducers séparés",
        "En utilisant l'état rejected dans createAsyncThunk",
        "En intégrant automatiquement un gestionnaire d'erreurs"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "Laquelle des fonctionnalités suivantes n'est PAS incluse dans Redux Toolkit ?",
      "options": [
        "Gestion automatique des requêtes API",
        "Génération automatique de types d'actions",
        "Prise en charge intégrée d'Immer"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Quel est l'objectif de la fonction `prepare` dans `createSlice` ?",
      "options": [
        "Personnaliser le payload d'une action",
        "Gérer la logique asynchrone",
        "Remplacer le réducteur"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "Comment combiner plusieurs reducers dans Redux Toolkit ?",
      "options": [
        "En utilisant extraReducers uniquement",
        "En passant un objet de reducers à configureStore",
        "En utilisant combineReducers"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Quel est l'objectif du champ `initialState` dans `createSlice` ?",
      "options": [
        "Définir l'état initial du slice",
        "Générer des types d'actions",
        "Gérer la logique asynchrone"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Pourquoi utiliser configureStore au lieu de createStore ?",
      "options": [
        "Pour éviter d'utiliser des actions",
        "Pour écrire moins de reducers",
        "Pour activer DevTools et inclure des middlewares par défaut"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "Quel est l'objectif du champ `reducers` dans `createSlice` ?",
      "options": [
        "Définir les réducteurs pour les actions",
        "Définir l'état initial",
        "Gérer la logique asynchrone"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "Comment surveiller l'état global dans un composant React avec Redux Toolkit ?",
      "options": [
        "En utilisant useState",
        "En utilisant le hook useSelector",
        "En utilisant connect"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Quel est l'objectif du callback `builder` dans `extraReducers` ?",
      "options": [
        "Gérer des actions en dehors du slice",
        "Définir des propriétés d'état supplémentaires",
        "Remplacer le réducteur principal"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "Comment Redux Toolkit simplifie-t-il la création des actions ?",
      "options": [
        "En activant des actions globales",
        "En générant automatiquement des types d'actions avec createSlice",
        "En supprimant les reducers"
      ],
      "correctOption": 1,
      "points": 30
    }
  ]
}
